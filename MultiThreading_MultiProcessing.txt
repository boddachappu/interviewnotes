Thread - smallest unit of execution with independant set of instructions
Multithreading - run threads parallely, but not in python. GIL operator creates a illusion that its parallel.In a threadpool, only 1 thread will be running at a give time

Its not alone for speeding up the computation. Its for efficient usage of CPU, which in turn increases speed
FOr, IO tasks like querying a db or loading a url, multi threading is useful
For CPU heavy tasks, multi processing is useful

Conclusion
There can only be one thread running at any given time in a python process.
Multiprocessing is parallelism. Multithreading is concurrency.
Multiprocessing is for increasing speed. Multithreading is for hiding latency.
Multiprocessing is best for computations. Multithreading is best for IO.
If you have CPU heavy tasks, use multiprocessing with n_process = n_cores and never more. Never!
If you have IO heavy tasks, use multithreading with n_threads = m * n_cores with m a number bigger than 1 that you can tweak on your own. Try many values and choose the one with the best speedup because there isnâ€™t a general rule. For instance the default value of m in ThreadPoolExecutor is set to 5 [Source] which honestly feels quite random in my opinion.

Check image:
https://miro.medium.com/max/1920/1*2zTp9ga9egrWu7GMhLK-nA.png

